document()
load_all()
head(studies)
check()
start_shiny()
remove.packages("bis620.2023")
# install.packages("devtools")
devtools::install_github("HouminXing/bis620.2022")
library(wordcloud2)
?wordcloud2
library(pkgdown)
pkgdown::build_site()
library(devtools)
check()
check()
document()
check()
document()
check()
data(studies)
bis620.2023:::create_phase_histogram_plot(studies = studies,
sponsor_type = "FED",
status_type = "Terminated",
brief_title_kw = "nash")
data(studies)
bis620.2023:::create_phase_histogram_plot(studies = studies,
sponsor_type = "FED",
status_type = 1,
brief_title_kw = "nash")
library(covr)
library(testthat)
report()
# draw a histogram for trials with different conditions
bis620.2023:::create_condition_histogram(studies = studies,
sponsor_type = "FED",
status_type = 1,
brief_title_kw = "nash")
# draw a histogram for trials with different conditions
data(studies)
data(conditions)
bis620.2023:::create_condition_histogram(studies = studies,
conditions = conditions,
sponsor_type = "FED",
status_type = 1,
brief_title_kw = "nash")
bis620.2023:::create_condition_histogram(studies = studies,
conditions = conditions,
sponsor_type = 1, # ALL_SPONSORS
status_type = 1, # ALL_STATUS
brief_title_kw = "nash")
# draw a histogram for trials with different conditions
data(studies)
data(conditions)
bis620.2023:::create_condition_histogram(studies = studies,
conditions = conditions,
sponsor_type = 1, # ALL_SPONSORS
status_type = 1, # ALL_STATUS
brief_title_kw = "nash")
document()
create_condition_histogram
document()
# draw a histogram for trials with different conditions
data(studies)
data(conditions)
bis620.2023:::create_condition_histogram(studies = studies,
conditions = conditions,
sponsor_type = 1, # ALL_SPONSORS
status_type = 1, # ALL_STATUS
brief_title_kw = "nash")
library(bis620.2023)
bis620.2023:::create_phase_histogram_plot(studies = studies,
sponsor_type = 1,
status_type = 1,
brief_title_kw = ""
)
document()
library(bis620.2023)
library(bis620.2023)
bis620.2023:::create_phase_histogram_plot(studies = studies,
sponsor_type = 1,
status_type = 1,
brief_title_kw = ""
)
remove.packages("bis620.2023")
devtools::install_github("HouminXing/bis620.2022")
library(bis620.2023)
devtools::install_github("HouminXing/bis620.2022")
library(bis620.2023)
library(usethis)
use_vignette(name = "final-project", title = "BIS 620 Final Project")
library(devtools)
install()
library(bis620.2023)
document()
check()
library(devtools)
?colnames
load("aae.rda")
document()
data(aae)
View(aae)
data("abmdxa")
View(abmdxa)
document()
c("o", "p") == c("p", "o")
"i" %in% c("i", "p")
c("i", "PP") %in% c("i", "p")
library(caret)
?train
data(df)
View(df)
?varImpPlot
library(bis620.2023)
library(dplyr)
library(tidyr)
data(avs)
data(abmdxa)
data(aae)
avs = avs |>
filter(VISIT == "SCREEN") |>
select(SUBJID, AGEY, SEX, RACE, VSTESTCD, VSSTRESN) |>
group_by(SUBJID) |>
mutate(age = round(mean(AGEY))) |>
ungroup() |>
select(-AGEY)
avs = avs |>
pivot_wider(names_from = VSTESTCD, values_from = VSSTRESN)
avs = avs |>
mutate(race = case_when(
RACE == "WHITE OR CAUCASIAN" ~ 1,
RACE == "HISPANIC OR LATINO" ~ 2,
RACE == "OTHER" ~ 3,
)) |>
select(-RACE)
avs = avs |> select(-HEIGHT, -WEIGHT)
abmdxa = abmdxa |>
select(SUBJID, BMLOC, DXABMCB, DXAAREAB) |>
mutate(daxbmd = DXABMCB / DXAAREAB) |>
distinct() |>
select(-DXABMCB, -DXAAREAB) |>
pivot_wider(names_from = BMLOC, values_from = daxbmd)
aae = dl$aae |>
select(SUBJID, AETOXGR) |>
group_by(SUBJID) |>
mutate(max_aetoxgr = max(AETOXGR)) |>
select(-AETOXGR) |>
distinct()
aae = aae |>
select(SUBJID, AETOXGR) |>
group_by(SUBJID) |>
mutate(max_aetoxgr = max(AETOXGR)) |>
select(-AETOXGR) |>
distinct()
# create "df" that will be used in model fitting
df = left_join(aae, avs, by = "SUBJID") |>
left_join(abmdxa, by = "SUBJID")
df <- df[rowSums(is.na(df)) <= 8, ]
changed_columns = c("age", "BMI", "DIABP", "PULSE", "SYSBP", "RESP", "TEMP", "FEMORAL NECK", "LUMBAR SPINE", "TOTAL HIP")
# replace NAs in numeric columns with column mean
for (col in changed_columns) {
col_mean <- mean(df[[col]], na.rm = TRUE)
df[[col]][is.na(df[[col]])] <- col_mean
}
library(caret)
data(df) # load the cleaned data frame (should be the same as the "df" above)
View(df)
?factor
?set.seed
?createDataPartition
?trainControl
?predict
?confusionMatrix
?varImp
?train
document()
model_results = ae_prediction(input_df = df)
check_columns(df)
input_df = df
input_df$max_aetoxgr = factor(input_df$max_aetoxgr)
set.seed(620) # for reproducibility
trainIndex <- createDataPartition(input_df$max_aetoxgr, p = 0.8, list = FALSE)
training_data <- input_df[trainIndex, ]
testing_data <- input_df[-trainIndex, ]
trControl <- trainControl(method = "cv",
number = 10,
search = "grid") # 10-fold cross validation
# random forest algorithm
model <- train(max_aetoxgr ~ ., data = training_data, method = "rf",
metric= "Accuracy", trControl = trainControl(), tuneGrid = NULL)
# random forest algorithm
model <- train(max_aetoxgr ~ ., data = training_data, method = "rf",
metric= "Accuracy", trControl = trControl, tuneGrid = NULL)
View(df)
input_df = df |> select(-SUBJID)
View(input_df)
input_df = df |> ungroup() # m|> select(-SUBJID)
View(input_df)
input_df = df |> ungroup() |> select(-SUBJID)
input_df$max_aetoxgr = factor(input_df$max_aetoxgr)
trainIndex <- createDataPartition(input_df$max_aetoxgr, p = 0.8, list = FALSE)
training_data <- input_df[trainIndex, ]
testing_data <- input_df[-trainIndex, ]
trControl <- trainControl(method = "cv",
number = 10,
search = "grid") # 10-fold cross validation
# random forest algorithm
model <- train(max_aetoxgr ~ ., data = training_data, method = "rf",
metric= "Accuracy", trControl = trControl, tuneGrid = NULL)
levels(training_data$max_aetoxgr)
class(input_df$max_aetoxgr)
sum(!complete.cases(training_data$max_aetoxgr))
head(input_df)
input_df$SEX = factor(input_df$SEX)
input_df$race = factor(input_df$race)
head(input_df)
input_df = df |> ungroup() |> select(-SUBJID)
input_df$max_aetoxgr = factor(input_df$max_aetoxgr)
input_df$SEX = factor(input_df$SEX)
input_df$race = factor(input_df$race)
set.seed(620) # for reproducibility
trainIndex <- createDataPartition(input_df$max_aetoxgr, p = 0.8, list = FALSE)
training_data <- input_df[trainIndex, ]
testing_data <- input_df[-trainIndex, ]
trControl <- trainControl(method = "cv",
number = 10,
search = "grid") # 10-fold cross validation
# random forest algorithm
model <- train(max_aetoxgr ~ ., data = training_data, method = "rf",
metric= "Accuracy", trControl = trControl, tuneGrid = NULL)
# random forest algorithm
model <- train(max_aetoxgr ~ ., data = training_data, method = "rf",
metric = "Accuracy", trControl = trainControl(), tuneGrid = NULL)
levels(training_data$max_aetoxgr)
head(training_data)
View(training_data)
colnames(input_df)
library(caret)
data(df) # load the cleaned data frame (should be the same as the "df" above)
input_df = df |> ungroup() |> select(-SUBJID)
colnames(input_df)[11] <- "FEMORAL_NECK"
colnames(input_df)[12] <- "LUMBAR_SPINE"
colnames(input_df)[13] <- "TOTAL_HIP"
input_df$max_aetoxgr = factor(input_df$max_aetoxgr)
input_df$SEX = factor(input_df$SEX)
input_df$race = factor(input_df$race)
set.seed(620) # for reproducibility
trainIndex <- createDataPartition(input_df$max_aetoxgr, p = 0.8, list = FALSE)
training_data <- input_df[trainIndex, ]
testing_data <- input_df[-trainIndex, ]
trControl <- trainControl(method = "cv",
number = 10,
search = "grid") # 10-fold cross validation
# random forest algorithm
model <- train(max_aetoxgr ~ ., data = training_data, method = "rf",
metric = "Accuracy", trControl = trControl, tuneGrid = NULL)
colnames(input_df)
# random forest algorithm
model <- train(max_aetoxgr ~ SEX + age + BMI + DIABP + PULSE + SYSBP + RESP + TEMP + race + FEMORAL_NECK + LUMBAR_SPINE + TOTAL_HIP, data = training_data, method = "rf", metric = "Accuracy", trControl = trControl, tuneGrid = NULL)
library(glmnet)
data(df)
input_df = df |> ungroup() |> select(-SUBJID)
input_df$SEX = factor(input_df$SEX)
input_df$race = factor(input_df$race)
set.seed(123)
trainIndex <- createDataPartition(input_df$max_aetoxgr, p = 0.7, list = FALSE)
training_data <- input_df[trainIndex, ]
testing_data <- input_df[-trainIndex, ]
training_data$max_aetoxgr <- as.factor(training_data$max_aetoxgr)
testing_data$max_aetoxgr <- as.factor(testing_data$max_aetoxgr)
# Set up the cross-validation control
cv_control <- cv.glmnetControl(alpha = 1, nfolds = 5)
?cv.glmnetControl
??cv.glmnetControl
View(training_data)
View(input_df)
input_df = df |> ungroup() |> select(-SUBJID)
colnames(input_df)[11] <- "FEMORAL_NECK"
View(input_df)
colnames(input_df)[12] <- "LUMBAR_SPINE"
colnames(input_df)[13] <- "TOTAL_HIP"
input_df$max_aetoxgr = factor(input_df$max_aetoxgr)
input_df$SEX = factor(input_df$SEX)
input_df$race = factor(input_df$race)
set.seed(620) # for reproducibility
trainIndex <- createDataPartition(input_df$max_aetoxgr, p = 0.8, list = FALSE)
training_data <- input_df[trainIndex, ]
testing_data <- input_df[-trainIndex, ]
View(testing_data)
trControl <- trainControl(method = "cv",
number = 10,
search = "grid") # 10-fold cross validation
# random forest algorithm
model <- train(max_aetoxgr ~ SEX + age + BMI + DIABP + PULSE + SYSBP + RESP + TEMP + race + FEMORAL_NECK + LUMBAR_SPINE + TOTAL_HIP, data = training_data, method = "rf", metric = "Accuracy", trControl = trControl, tuneGrid = NULL)
View(training_data)
install.packages("randomForest")
library(randomForest)
data(df) # load the cleaned data frame (should be the same as the "df" above)
df = df |> ungroup() |> select(-SUBJID)
colnames(df)[11] = "FEMORAL_NECK"
colnames(df)[12] = "LUMBAR_SPINE"
colnames(df)[13] = "TOTAL_HIP"
View(df)
input_df = df
input_df$max_aetoxgr = factor(input_df$max_aetoxgr)
input_df$SEX = factor(input_df$SEX)
input_df$race = factor(input_df$race)
set.seed(620) # for reproducibility
trainIndex <- createDataPartition(input_df$max_aetoxgr, p = 0.8, list = FALSE)
training_data <- input_df[trainIndex, ]
testing_data <- input_df[-trainIndex, ]
rf_model <- randomForest(max_aetoxgr ~ .  , data = training_data, ntree = 1000)
predictions <- predict(rf_model, newdata = testing_data)
predictions
conf_matrix <- table(predictions, testing_data$max_aetoxgr)
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
conf_matrix
result = list(model_summary = rf_model$call,
confusion_matrix = rf_model$confusion,
feature_importance = varImp(rf_model))
result$feature_importance
?randomForest
?expand.grid
variables = c("max_aetoxgr", "age", "BMI", "FEMORAL NECK", "LUMBAR SPINE",
"TOTAL HIP")
df$max_aetoxgr = factor(df$max_aetoxgr)
df$SEX = factor(df$SEX)
df$race = factor(df$race)
data = df |> ungroup()
for(var in variables) {
if(is.numeric(data[[var]])) {
p <- ggplot(data, aes(x = .data[[var]])) +
geom_histogram(bins = 20, fill = "skyblue", color="black") +
labs(title = paste("Histogram of", var), x = var, y = "Frequency") +
theme_minimal()
} else {
p <- ggplot(data, aes(x = .data[[var]])) +
geom_bar(fill = "skyblue", color="black") +
labs(title = paste("Bar Plot of", var), x = var, y = "Count") +
theme_minimal()
}
i=i+1
print(p)
}
variables = c("max_aetoxgr", "age", "BMI", "FEMORAL NECK", "LUMBAR SPINE",
"TOTAL HIP")
df$max_aetoxgr = factor(df$max_aetoxgr)
df$SEX = factor(df$SEX)
df$race = factor(df$race)
data = df |> ungroup()
for(var in variables) {
if(is.numeric(data[[var]])) {
p <- ggplot(data, aes(x = .data[[var]])) +
geom_histogram(bins = 20, fill = "skyblue", color="black") +
labs(title = paste("Histogram of", var), x = var, y = "Frequency") +
theme_minimal()
} else {
p <- ggplot(data, aes(x = .data[[var]])) +
geom_bar(fill = "skyblue", color="black") +
labs(title = paste("Bar Plot of", var), x = var, y = "Count") +
theme_minimal()
}
print(p)
}
data(df)
variables = c("max_aetoxgr", "age", "BMI", "FEMORAL NECK", "LUMBAR SPINE",
"TOTAL HIP")
df$max_aetoxgr = factor(df$max_aetoxgr)
df$SEX = factor(df$SEX)
df$race = factor(df$race)
data = df |> ungroup()
for(var in variables) {
if(is.numeric(data[[var]])) {
p <- ggplot(data, aes(x = .data[[var]])) +
geom_histogram(bins = 20, fill = "skyblue", color="black") +
labs(title = paste("Histogram of", var), x = var, y = "Frequency") +
theme_minimal()
} else {
p <- ggplot(data, aes(x = .data[[var]])) +
geom_bar(fill = "skyblue", color="black") +
labs(title = paste("Bar Plot of", var), x = var, y = "Count") +
theme_minimal()
}
print(p)
}
?table
# model_results = ae_prediction(input_df = df)
df = df |> ungroup() |> select(-SUBJID)
colnames(df)[11] = "FEMORAL_NECK"
colnames(df)[12] = "LUMBAR_SPINE"
colnames(df)[13] = "TOTAL_HIP"
input_df = df
input_df$max_aetoxgr = factor(input_df$max_aetoxgr)
input_df$SEX = factor(input_df$SEX)
input_df$race = factor(input_df$race)
set.seed(620) # for reproducibility
trainIndex <- createDataPartition(input_df$max_aetoxgr, p = 0.8, list = FALSE)
training_data <- input_df[trainIndex, ]
testing_data <- input_df[-trainIndex, ]
rf_model <- randomForest(max_aetoxgr ~ .  , data = training_data, ntree = 1000)
predictions <- predict(rf_model, newdata = testing_data)
predictions
conf_matrix <- table(predictions, testing_data$max_aetoxgr,
dnn = list.names("Reality", "Prediction"))
conf_matrix <- table(predictions, testing_data$max_aetoxgr,
dnn = list("Reality", "Prediction"))
conf_matrix
?warning
?ungroup
?colnames
?createDataPartition
?randomForest
?predict
?table
?sum
?diag
result$confusion_matrix
result$model_summary
library(usethis)
library(testthat)
use_test("check_columns")
library(bis620.2023)
library(dplyr)
library(tidyr)
data(avs)
data(abmdxa)
data(aae)
avs = avs |>
filter(VISIT == "SCREEN") |>
select(SUBJID, AGEY, SEX, RACE, VSTESTCD, VSSTRESN) |>
group_by(SUBJID) |>
mutate(age = round(mean(AGEY))) |>
ungroup() |>
select(-AGEY)
avs = avs |>
pivot_wider(names_from = VSTESTCD, values_from = VSSTRESN)
avs = avs |>
mutate(race = case_when(
RACE == "WHITE OR CAUCASIAN" ~ 1,
RACE == "HISPANIC OR LATINO" ~ 2,
RACE == "OTHER" ~ 3,
)) |>
select(-RACE)
avs = avs |> select(-HEIGHT, -WEIGHT)
abmdxa = abmdxa |>
select(SUBJID, BMLOC, DXABMCB, DXAAREAB) |>
mutate(daxbmd = DXABMCB / DXAAREAB) |>
distinct() |>
select(-DXABMCB, -DXAAREAB) |>
pivot_wider(names_from = BMLOC, values_from = daxbmd)
aae = aae |>
select(SUBJID, AETOXGR) |>
group_by(SUBJID) |>
mutate(max_aetoxgr = max(AETOXGR)) |>
select(-AETOXGR) |>
distinct()
# create "df" that will be used in model fitting
df = left_join(aae, avs, by = "SUBJID") |>
left_join(abmdxa, by = "SUBJID")
df <- df[rowSums(is.na(df)) <= 8, ]
changed_columns = c("age", "BMI", "DIABP", "PULSE", "SYSBP", "RESP", "TEMP", "FEMORAL NECK", "LUMBAR SPINE", "TOTAL HIP")
# replace NAs in numeric columns with column mean
for (col in changed_columns) {
col_mean <- mean(df[[col]], na.rm = TRUE)
df[[col]][is.na(df[[col]])] <- col_mean
}
variables = c("max_aetoxgr", "age", "BMI", "FEMORAL NECK", "LUMBAR SPINE",
"TOTAL HIP")
df$max_aetoxgr = factor(df$max_aetoxgr)
df$SEX = factor(df$SEX)
df$race = factor(df$race)
data = df |> ungroup()
for(var in variables) {
if(is.numeric(data[[var]])) {
p <- ggplot(data, aes(x = .data[[var]])) +
geom_histogram(bins = 20, fill = "skyblue", color="black") +
labs(title = paste("Histogram of", var), x = var, y = "Frequency") +
theme_minimal()
} else {
p <- ggplot(data, aes(x = .data[[var]])) +
geom_bar(fill = "skyblue", color="black") +
labs(title = paste("Bar Plot of", var), x = var, y = "Count") +
theme_minimal()
}
print(p)
}
library(caret)
library(randomForest)
data(df) # load the cleaned data frame (should be the same as the "df" above)
model_results = ae_prediction(input_df = df)
library(caret)
library(randomForest)
data(df) # load the cleaned data frame (should be the same as the "df" above)
model_results = ae_prediction(input_df = df)
document()
document()
model_results = ae_prediction(input_df = df)
# print the model summary
print(model_results$model_summary)
# display the confusion matrix
model_results$confusion_matrix
# show the calculated feature_importance
model_results$feature_importance
avs = avs |>
filter(VISIT == "SCREEN") |>
select(SUBJID, AGEY, SEX, RACE, VSTESTCD, VSSTRESN) |>
group_by(SUBJID) |>
mutate(age = round(mean(AGEY))) |>
ungroup() |>
select(-AGEY)
View(avs)
load("~/Desktop/BIS 620/HWs/HW3/bis620.2023/data/avs.rda")
View(avs)
