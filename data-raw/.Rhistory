stateorcountry_count$Stateorcountry <-
as.character(stateorcountry_count$Stateorcountry)
stateorcountry_count$Stateorcountry[is.na(stateorcountry_count$Stateorcountry)] =
"NA"
stateorcountry_count$Count[stateorcountry_count$Stateorcountry == "DE"] <-
stateorcountry_count$Count[stateorcountry_count$Stateorcountry == "DE"] +
stateorcountry_count$Count[stateorcountry_count$Stateorcountry == "Delaware"]
stateorcountry_count = stateorcountry_count |>
filter(!Stateorcountry %in% c("Delaware"))
stateorcountry_count$Stateorcountry[stateorcountry_count$Stateorcountry == "BERMUDA"] <- "Bermuda"
# Stateorcountry
stateorcountry_count = glioma |>
group_by(Stateorcountry) |>
summarise(Count = n())
stateorcountry_count
# note that it's possible that some states/countries have different
# types of entries so we need to do some standardization work later
# deal with NA entries first
stateorcountry_count$Stateorcountry <-
as.character(stateorcountry_count$Stateorcountry)
stateorcountry_count$Stateorcountry[is.na(stateorcountry_count$Stateorcountry)] =
"NA"
# combine "Delaware" to "DE"
stateorcountry_count$Count[stateorcountry_count$Stateorcountry == "DE"] <-
stateorcountry_count$Count[stateorcountry_count$Stateorcountry == "DE"] +
stateorcountry_count$Count[stateorcountry_count$Stateorcountry == "Delaware"]
stateorcountry_count = stateorcountry_count |>
filter(!Stateorcountry %in% c("Delaware"))
# Combine "BERMUDA" to "Bermuda"
stateorcountry_count$Count[stateorcountry_count$Stateorcountry == "Bermuda"] <-
stateorcountry_count$Count[stateorcountry_count$Stateorcountry == "Bermuda"] +
stateorcountry_count$Count[stateorcountry_count$Stateorcountry == "BERMUDA"]
stateorcountry_count = stateorcountry_count |>
filter(!Stateorcountry %in% c("BERMUDA"))
# combine "Brasil", "Ceara, Brazil" to "Brazil"
stateorcountry_count$Count[stateorcountry_count$Stateorcountry == "Brazil"] <-
stateorcountry_count$Count[stateorcountry_count$Stateorcountry == "Brazil"] +
stateorcountry_count$Count[stateorcountry_count$Stateorcountry == "Brasil"] +
stateorcountry_count$Count[stateorcountry_count$Stateorcountry ==
"Ceara, Brazil"]
stateorcountry_count = stateorcountry_count |>
filter(!Stateorcountry %in% c("Brasil", "Ceara, Brazil"))
stateorcountry_count$Count[stateorcountry_count$Stateorcountry == "UK"] <-
stateorcountry_count$Count[stateorcountry_count$Stateorcountry == "UK"] +
stateorcountry_count$Count[stateorcountry_count$Stateorcountry == "England"] +
stateorcountry_count$Count[stateorcountry_count$Stateorcountry ==
"Lancashire, UK"] +
stateorcountry_count$Count[stateorcountry_count$Stateorcountry ==
"London, UK"] +
stateorcountry_count$Count[stateorcountry_count$Stateorcountry ==
"Manchester, UK"] +
stateorcountry_count$Count[stateorcountry_count$Stateorcountry ==
"Sussex, UK"] +
stateorcountry_count$Count[stateorcountry_count$Stateorcountry ==
"United Kingdom"]
stateorcountry_count = stateorcountry_count |>
filter(!Stateorcountry %in% c("England", "Lancashire, UK", "London, UK",
"Manchester, UK", "Sussex, UK",
"United Kingdom"))
stateorcountry_count$Count[stateorcountry_count$Stateorcountry == "MO"] <-
stateorcountry_count$Count[stateorcountry_count$Stateorcountry == "MO"] +
stateorcountry_count$Count[stateorcountry_count$Stateorcountry == "Misssouri"]
stateorcountry_count = stateorcountry_count |>
filter(!Stateorcountry %in% c("Misssouri"))
stateorcountry_count$Count[stateorcountry_count$Stateorcountry == "Australia"] <-
stateorcountry_count$Count[stateorcountry_count$Stateorcountry ==
"Australia"] +
stateorcountry_count$Count[stateorcountry_count$Stateorcountry ==
"NSW, Australia"] +
stateorcountry_count$Count[stateorcountry_count$Stateorcountry ==
"QLD AUSTra"] +
stateorcountry_count$Count[stateorcountry_count$Stateorcountry ==
"Queensland Australia"] +
stateorcountry_count$Count[stateorcountry_count$Stateorcountry ==
"Queensland/Australia"] +
stateorcountry_count$Count[stateorcountry_count$Stateorcountry ==
"VIC/Australia"]
stateorcountry_count = stateorcountry_count |>
filter(!Stateorcountry %in% c("NSW, Australia", "QLD AUSTra",
"Queensland Australia",
"Queensland/Australia", "VIC/Australia"))
stateorcountry_count$Count[stateorcountry_count$Stateorcountry == "NY"] <-
stateorcountry_count$Count[stateorcountry_count$Stateorcountry == "NY"] +
stateorcountry_count$Count[stateorcountry_count$Stateorcountry == "NY?"]
stateorcountry_count = stateorcountry_count |>
filter(!Stateorcountry %in% c("NY?"))
stateorcountry_count$Count[stateorcountry_count$Stateorcountry == "Canada"] <-
stateorcountry_count$Count[stateorcountry_count$Stateorcountry == "Canada"] +
stateorcountry_count$Count[stateorcountry_count$Stateorcountry == "CANADA"] +
stateorcountry_count$Count[stateorcountry_count$Stateorcountry ==
"ON, Canada"] +
stateorcountry_count$Count[stateorcountry_count$Stateorcountry ==
"Ontario Canada"] +
stateorcountry_count$Count[stateorcountry_count$Stateorcountry ==
"Ontario, CA"] +
stateorcountry_count$Count[stateorcountry_count$Stateorcountry ==
"Ontario, Canada"]
stateorcountry_count = stateorcountry_count |>
filter(!Stateorcountry %in% c("CANADA", "ON, Canada", "Ontario Canada",
"Ontario, CA", "Ontario, Canada"))
stateorcountry_count$Count[stateorcountry_count$Stateorcountry == "OR"] <-
stateorcountry_count$Count[stateorcountry_count$Stateorcountry == "OR"] +
stateorcountry_count$Count[stateorcountry_count$Stateorcountry == "Oregon"]
stateorcountry_count = stateorcountry_count |>
filter(!Stateorcountry %in% c("Oregon"))
stateorcountry_count$Count[stateorcountry_count$Stateorcountry == "NA"] <-
stateorcountry_count$Count[stateorcountry_count$Stateorcountry == "NA"] +
stateorcountry_count$Count[stateorcountry_count$Stateorcountry == "PN"]
stateorcountry_count = stateorcountry_count |>
filter(!Stateorcountry %in% c("PN"))
stateorcountry_count$Stateorcountry[stateorcountry_count$Stateorcountry == "NZ"] <- "New Zealand"
# convert "COLUMBIA" to "Columbia"
stateorcountry_count$Stateorcountry[stateorcountry_count$Stateorcountry == "COLUMBIA"] <- "Columbia"
stateorcountry_count$Stateorcountry[stateorcountry_count$Stateorcountry == "COLOMBIA"] <- "Colombia"
library(maps)
detach("package:purrr", unload = TRUE)
library(purrr)
library(maps)
world <- map_data("world")
world |> select(region) |> distinct()
countries <- world |> select(region) |> distinct()
any("Hong Kong" %in% countries)
stateorcountry_count$Stateorcountry[stateorcountry_count$Stateorcountry == "Hong Kong"] <- "China"
stateorcountry_count
any("Netherlands" %in% countries)
any("Netherlands" %in% countries$region)
any("Hong Kong" %in% countries$region)
# remove NA values
stateorcountry_count_no_na <- stateorcountry_count |>
filter(!Stateorcountry %in% c("NA"))
nrow(stateorcountry_count_no_na)
stateorcountry_count_no_na |> filter(length(Stateorcountry) == 2)
stateorcountry_count_no_na |> filter(nchar(Stateorcountry) == 2)
# remove NA values
stateorcountry_count_no_na <- stateorcountry_count |>
filter(!Stateorcountry %in% c("NA"))
# US state level data
us_residence <- stateorcountry_count_no_na |> filter(nchar(Stateorcountry) == 2)
# World country level data
world_residence <- stateorcountry_count_no_na |>
filter(!nchar(Stateorcountry) == 2)
sum(us_residence$Count)
# Add US to the country level data
world_residence[nrow(world_residence) + 1, ] = c("USA", sum(us_residence$Count))
world_residence[nrow(world_residence) + 1, ] =
list("USA", sum(us_residence$Count))
View(world_residence)
diff <- setdiff(world$region, world_residence$Stateorcountry)
diff
View(world_residence)
View(us_residence)
us_residence <- stateorcountry_count_no_na |>
filter(nchar(Stateorcountry) == 2) |>
filter(Stateorcountry != "UK")
world_residence <- stateorcountry_count_no_na |>
filter(!Stateorcountry %in% us_residence$Stateorcountry)
# Add US to the country level data
world_residence[nrow(world_residence) + 1, ] =
list("USA", sum(us_residence$Count))
# Plot the country level data
worldSubset <- left_join(world,
world_residence,
by = c("region" = "Stateorcountry"))
head(worldSubset)
worldSubset |> filter(region == "USA")
worldSubset$Count[is.na(worldSubset$Count)] <- 0
head(worldSubset)
library(RColorBrewer)
## Let's ditch many of the unnecessary elements
plain <- theme(
axis.text = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
panel.border = element_blank(),
panel.grid = element_blank(),
axis.title = element_blank(),
panel.background = element_rect(fill = "white"),
plot.title = element_text(hjust = 0.5)
)
plain <- theme(
panel.border = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(fill = "white"),
plot.title = element_text(hjust = 0.5)
)
ggplot(data = worldSubset, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(aes(fill = Count)) +
scale_fill_distiller(palette = "RdBu", direction = -1) + # or direction=1
ggtitle("Participants' Place of Residence: Worldwide") +
plain
plain <- theme(
panel.grid = element_blank(),
panel.background = element_rect(fill = "white"),
plot.title = element_text(hjust = 0.5)
)
ggplot(data = worldSubset, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(aes(fill = Count)) +
scale_fill_distiller(palette = "RdBu", direction = -1) + # or direction=1
ggtitle("Participants' Place of Residence: Worldwide") +
plain
## Let's ditch many of the unnecessary elements
plain <- theme(
panel.background = element_rect(fill = "white"),
plot.title = element_text(hjust = 0.5)
)
ggplot(data = worldSubset, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(aes(fill = Count)) +
scale_fill_distiller(palette = "RdBu", direction = -1) + # or direction=1
ggtitle("Participants' Place of Residence: Worldwide") +
plain
ggplot(data = worldSubset, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(aes(fill = Count)) +
scale_fill_distiller(palette = "RdBu", direction = -1) + # or direction=1
ggtitle("Participants' Place of Residence: Worldwide")
## Let's ditch many of the unnecessary elements
plain <- theme(
axis.line = element_line(color="black"),
panel.background = element_rect(fill = "white"),
plot.title = element_text(hjust = 0.5)
)
ggplot(data = worldSubset, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(aes(fill = Count)) +
scale_fill_distiller(palette = "RdBu", direction = -1) + # or direction=1
ggtitle("Participants' Place of Residence: Worldwide") +
plain
View(world_residence)
worldSubset = worldSubset |>
mutate(
Enrollment = case_when(
Count == 0                ~ "0 Enrollment",
Count > 0 & Count <= 10   ~ "1-10 Enrollment",
Count > 10 & Count <= 100 ~ "10-100 Enrollment",
Count > 100               ~ "> 100 Enrollment"
),
# Convert to factor
Enrollment = factor(
Enrollment,
level = c("0 Enrollment", "1-10 Enrollment",
"10-100 Enrollment", "> 100 Enrollment")
)
)
## Let's ditch many of the unnecessary elements
plain <- theme(
axis.line = element_line(color="black"),
panel.background = element_rect(fill = "white"),
plot.title = element_text(hjust = 0.5)
)
ggplot(data = worldSubset, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(aes(fill = Enrollment)) +
scale_fill_distiller(palette = "RdBu", direction = -1) + # or direction=1
ggtitle("Participants' Place of Residence: Worldwide") +
plain
ggplot(data = worldSubset, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(aes(fill = Enrollment)) +
ggtitle("Participants' Place of Residence: Worldwide") +
plain
ggplot(data = worldSubset, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(aes(fill = Enrollment)) +
scale_fill_brewer(palette = "Blues") +
ggtitle("Participants' Place of Residence: Worldwide") +
plain
ggplot(data = worldSubset, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(aes(fill = Enrollment)) +
scale_fill_brewer(palette = "GnBu") +
ggtitle("Participants' Place of Residence: Worldwide") +
plain
us_residence[nrow(us_residence) + 1, ] <- list("ND", 0)
View(us_residence)
plot_usmap(data = us_residence, values = "Count", labels = TRUE)
colnames(us_residence)[1] <- "state"
# Plot the US state level data
plot_usmap(data = us_residence, values = "Count", labels = TRUE)
plot_usmap(data = us_residence, values = "Count", labels = TRUE) +
ggtitle("Domestic Participants' Place of Residence: USA") +
theme(plot.title = element_text(hjust = 0.5))
# Plot the US state level data
plot_usmap(data = us_residence, values = "Count", labels = TRUE) +
ggtitle("Domestic Participants' Place of Residence: USA") +
theme(plot.title = element_text(size = 20, hjust = 0.5))
plot_usmap(data = us_residence, values = "Count", labels = TRUE) +
ggtitle("Domestic Participants' Place of Residence: USA") +
theme(plot.title = element_text(size = 10, hjust = 0.5))
# Plot the US state level data
plot_usmap(data = us_residence, values = "Count", labels = TRUE) +
ggtitle("Domestic Participants' Place of Residence: USA") +
theme(plot.title = element_text(size = 15, hjust = 0.5))
plot_usmap(data = us_residence, values = "Count", labels = TRUE) +
ggtitle("Domestic Participants' Place of Residence: USA") +
theme(plot.title = element_text(size = 14, hjust = 0.5))
usa <- map_data("usa")
View(us_residence)
# Create 4 Categories for "Count"
us_residence = us_residence |>
mutate(
Enrollment = case_when(
Count == 0                ~ "0 Enrollment",
Count > 0 & Count <= 10   ~ "1-10 Enrollment",
Count > 10 & Count <= 100 ~ "10-100 Enrollment",
Count > 100               ~ "> 100 Enrollment"
),
# Convert to factor
Enrollment = factor(
Enrollment,
level = c("0 Enrollment", "1-10 Enrollment",
"10-100 Enrollment", "> 100 Enrollment")
)
)
# Plot the US state level data
plot_usmap(data = us_residence, values = "Enrollment", labels = TRUE) +
ggtitle("Domestic Participants' Place of Residence: USA") +
theme(plot.title = element_text(size = 14, hjust = 0.5))
# Plot the US state level data
plot_usmap(data = us_residence, values = "Enrollment", labels = TRUE) +
scale_fill_brewer(palette = "YlOrRd") +
ggtitle("Domestic Participants' Place of Residence: USA") +
theme(plot.title = element_text(size = 14, hjust = 0.5))
View(us_residence)
# Plot the US state level data
plot_usmap(data = us_residence, values = "Enrollment", labels = TRUE) +
scale_fill_brewer(palette = "YlGnBu") +
ggtitle("Domestic Participants' Place of Residence: USA") +
theme(plot.title = element_text(size = 14, hjust = 0.5))
# Plot the US state level data
plot_usmap(data = us_residence,
values = "Enrollment", labels = TRUE, alpha = 0.8) +
scale_fill_brewer(palette = "YlGnBu") +
ggtitle("Domestic Participants' Place of Residence: USA") +
theme(plot.title = element_text(size = 14, hjust = 0.5))
# Plot the US state level data
plot_usmap(data = us_residence,
values = "Enrollment", labels = TRUE, alpha = 0.8) +
scale_fill_brewer(palette = "YlGnBu", name = "Enrollment Number") +
ggtitle("Domestic Participants' Place of Residence: USA") +
theme(plot.title = element_text(size = 14, hjust = 0.5))
ggplot(data = worldSubset, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(aes(fill = Enrollment)) +
scale_fill_brewer(palette = "GnBu", name = "Enrollment Number") +
ggtitle("Participants' Place of Residence: Worldwide") +
plain
# Plot the US state level data
plot_usmap(data = us_residence,
values = "Enrollment", labels = TRUE, alpha = 0.8) +
scale_fill_brewer(palette = "YlGnBu", name = "Enrollment Number") +
ggtitle("Domestic Participants' Place of Residence: USA") +
theme(plot.title = element_text(size = 14, hjust = 0.5),
legend.position = c(0.36, -0.05),
legend.direction = "horizontal")
# Plot the US state level data
plot_usmap(data = us_residence,
values = "Enrollment", labels = TRUE, alpha = 0.8) +
scale_fill_brewer(palette = "YlGnBu", name = "Enrollment Number") +
ggtitle("Domestic Participants' Place of Residence: USA") +
theme(plot.title = element_text(size = 14, hjust = 0.5),
legend.position = c(0.26, -0.05),
legend.direction = "horizontal")
# Plot the US state level data
plot_usmap(data = us_residence,
values = "Enrollment", labels = TRUE, alpha = 0.8) +
scale_fill_brewer(palette = "YlGnBu", name = "Enrollment Number") +
ggtitle("Domestic Participants' Place of Residence: USA") +
theme(plot.title = element_text(size = 14, hjust = 0.5),
legend.position = c(0.16, -0.05),
legend.direction = "horizontal")
# Plot the US state level data
plot_usmap(data = us_residence,
values = "Enrollment", labels = TRUE, alpha = 0.8) +
scale_fill_brewer(palette = "YlGnBu", name = "Enrollment Number") +
ggtitle("Domestic Participants' Place of Residence: USA") +
theme(plot.title = element_text(size = 14, hjust = 0.5),
legend.position = c(0.06, -0.05),
legend.direction = "horizontal")
# Plot the US state level data
plot_usmap(data = us_residence,
values = "Enrollment", labels = TRUE, alpha = 0.8) +
scale_fill_brewer(palette = "YlGnBu", name = "Enrollment Number") +
ggtitle("Domestic Participants' Place of Residence: USA") +
theme(plot.title = element_text(size = 14, hjust = 0.5),
legend.position = c(-0.06, -0.05),
legend.direction = "horizontal")
# Plot the US state level data
plot_usmap(data = us_residence,
values = "Enrollment", labels = TRUE, alpha = 0.8) +
scale_fill_brewer(palette = "YlGnBu", name = "Enrollment Number") +
ggtitle("Domestic Participants' Place of Residence: USA") +
theme(plot.title = element_text(size = 14, hjust = 0.5),
legend.position = c(-0.16, -0.05),
legend.direction = "horizontal")
# Plot the US state level data
plot_usmap(data = us_residence,
values = "Enrollment", labels = TRUE, alpha = 0.8) +
scale_fill_brewer(palette = "YlGnBu", name = "Enrollment Number") +
ggtitle("Domestic Participants' Place of Residence: USA") +
theme(plot.title = element_text(size = 14, hjust = 0.5),
legend.position = c(-0.15, -0.045),
legend.direction = "horizontal")
# Plot the US state level data
p <- plot_usmap(data = us_residence,
values = "Enrollment", labels = TRUE, alpha = 0.8) +
scale_fill_brewer(palette = "YlGnBu", name = "Enrollment Number") +
ggtitle("Domestic Participants' Place of Residence: USA") +
theme(plot.title = element_text(size = 14, hjust = 0.5),
legend.position = c(-0.15, -0.045),
legend.direction = "horizontal")
p$layers[[2]]$aes_params$size <- 5
print(p)
p$layers[[2]]$aes_params$size <- 1
print(p)
p$layers[[2]]$aes_params$size <- 2
print(p)
setwd("~/Downloads")
knitr::opts_chunk$set(echo = TRUE)
aae = read_sas("aae.sas7bdat")
setwd("~/Downloads")
library(haven)
aae = read_sas("aae.sas7bdat")
View(aae)
distinct(aae$AETOXGR)
distinct(aae |> select(AETOXGR))
nrow(aae |> filter(AETOXGR == "05"))
library(purrr)
trial_path = file.path("Amgen 20040135 SAS datasets")
trial_files = list.files(trial_path, pattern = "*.sas7bdat")
dl = map(file.path(trial_path, trial_files), ~ read_sas(.x))
names(dl) = gsub("*_pds2019.sas7bdat", "", trial_files)
names(dl) = gsub("*.sas7bdat", "", trial_files)
head(dl$abmdxa)
head(dl$avs)
setwd("~/Desktop/BIS 620/HWs/HW3/bis620.2023/data-raw")
library(haven)
library(purrr)
trial_path = file.path("NCT00089661")
trial_files = list.files(trial_path, pattern = "*.sas7bdat")
# return a list
dl = map(file.path(trial_path, trial_files), ~ read_sas(.x))
names(dl) = gsub("*.sas7bdat", "", trial_files)
library(dplyr)
avs = dl$avs
avs = avs |>
select(VISIT, SUBJID, AGEY, SEX, RACE, VSTESTCD, VSSTRESN)
usethis::use_data(avs, overwrite = TRUE)
library(tidyr)
avs = avs |>
filter( VISIT == "SCREEN") |>
select(SUBJID, AGEY, SEX, RACE, VSTESTCD, VSSTRESN) |>
group_by(SUBJID) |>
mutate(age = round(mean(AGEY))) |>
ungroup() |>
select(-AGEY)
avs = avs |>
pivot_wider(names_from = VSTESTCD, values_from = VSSTRESN)
avs = avs |>
mutate(race = case_when(
RACE == "WHITE OR CAUCASIAN" ~ 1,
RACE == "HISPANIC OR LATINO" ~ 2,
RACE == "OTHER" ~ 3,
)) |>
select(-RACE)
avs = avs |> select(-HEIGHT, -WEIGHT)
abmdxa = dl$abmdxa
abmdxa = abmdxa |>
select(SUBJID, BMLOC, DXABMCB, DXAAREAB)
usethis::use_data(abmdxa, overwrite = TRUE)
abmdxa = abmdxa |>
mutate(daxbmd = DXABMCB / DXAAREAB) |>
distinct() |>
select(-DXABMCB, -DXAAREAB) |>
pivot_wider(names_from = BMLOC, values_from = daxbmd)
aae = dl$aae |>
select(SUBJID, AETOXGR)
usethis::use_data(aae, overwrite = TRUE)
aae = aae |>
group_by(SUBJID) |>
mutate(max_aetoxgr = max(AETOXGR)) |>
select(-AETOXGR) |>
distinct()
df = left_join(aae, avs, by = "SUBJID") |>
left_join(abmdxa, by = "SUBJID")
df <- df[rowSums(is.na(df)) <= 8, ]
changed_columns = c("age", "BMI", "DIABP", "PULSE", "SYSBP", "RESP", "TEMP", "FEMORAL NECK", "LUMBAR SPINE", "TOTAL HIP")
for (col in changed_columns) {
col_mean <- mean(df[[col]], na.rm = TRUE)
df[[col]][is.na(df[[col]])] <- col_mean
}
usethis::use_data(df, overwrite = TRUE)
# read-in data
setwd("~/Desktop/BIS 623/Final Project")
load(file='BIS623_FinalProjectData.rda') # the data is stored in the "data"
View(data)
row.names(data) <- NULL
head(data)
sum(is.na(data))
is.na(data)
any(is.na(data))
data$babysex <- as.factor(data$babysex)
data$frace <- as.factor(data$frace)
data$malform <- as.factor(data$malform)
data$mrace <- as.factor(data$mrace)
data$babysex <- as.factor(data$babysex)
data$frace <- as.factor(data$frace)
data$malform <- as.factor(data$malform)
data$mrace <- as.factor(data$mrace)
View(data)
